use anyhow::{anyhow, Result};

pub fn lang_to_id(lang_name: &str) -> Result<i64> {
    match lang_name {
        "C++ 20 (gcc 12.2)" => Ok(5001),
        "Go (go 1.20.6)" => Ok(5002),
        "C# 11.0 (.NET 7.0.7)" => Ok(5003),
        "Kotlin (Kotlin/JVM 1.8.20)" => Ok(5004),
        "Java (OpenJDK 17)" => Ok(5005),
        "Nim (Nim 1.6.14)" => Ok(5006),
        "V (V 0.4)" => Ok(5007),
        "Zig (Zig 0.10.1)" => Ok(5008),
        "JavaScript (Node.js 18.16.1)" => Ok(5009),
        "JavaScript (Deno 1.35.1)" => Ok(5010),
        "R (GNU R 4.2.1)" => Ok(5011),
        "D (DMD 2.104.0)" => Ok(5012),
        "D (LDC 1.32.2)" => Ok(5013),
        "Swift (swift 5.8.1)" => Ok(5014),
        "Dart (Dart 3.0.5)" => Ok(5015),
        "PHP (php 8.2.8)" => Ok(5016),
        "C (gcc 12.2.0)" => Ok(5017),
        "Ruby (ruby 3.2.2)" => Ok(5018),
        "Crystal (Crystal 1.9.1)" => Ok(5019),
        "Brainfuck (bf 20041219)" => Ok(5020),
        "F# 7.0 (.NET 7.0.7)" => Ok(5021),
        "Julia (Julia 1.9.2)" => Ok(5022),
        "Bash (bash 5.2.2)" => Ok(5023),
        "Text (cat 8.32)" => Ok(5024),
        "Haskell (GHC 9.4.5)" => Ok(5025),
        "Fortran (gfortran 12.2)" => Ok(5026),
        "Lua (LuaJIT 2.1.0-beta3)" => Ok(5027),
        "C++ 23 (gcc 12.2)" => Ok(5028),
        "Common Lisp (SBCL 2.3.6)" => Ok(5029),
        "COBOL (Free) (GnuCOBOL 3.1.2)" => Ok(5030),
        "C++ 23 (Clang 16.0.5)" => Ok(5031),
        "Zsh (Zsh 5.9)" => Ok(5032),
        "SageMath (SageMath 9.5)" => Ok(5033),
        "Sed (GNU sed 4.8)" => Ok(5034),
        "bc (bc 1.07.1)" => Ok(5035),
        "dc (dc 1.07.1)" => Ok(5036),
        "Perl (perl  5.34)" => Ok(5037),
        "AWK (GNU Awk 5.0.1)" => Ok(5038),
        "なでしこ (cnako3 3.4.20)" => Ok(5039),
        "Assembly x64 (NASM 2.15.05)" => Ok(5040),
        "Pascal (fpc 3.2.2)" => Ok(5041),
        "C# 11.0 AOT (.NET 7.0.7)" => Ok(5042),
        "Lua (Lua 5.4.6)" => Ok(5043),
        "Prolog (SWI-Prolog 9.0.4)" => Ok(5044),
        "PowerShell (PowerShell 7.3.1)" => Ok(5045),
        "Scheme (Gauche 0.9.12)" => Ok(5046),
        "Scala 3.3.0 (Scala Native 0.4.14)" => Ok(5047),
        "Visual Basic 16.9 (.NET 7.0.7)" => Ok(5048),
        "Forth (gforth 0.7.3)" => Ok(5049),
        "Clojure (babashka 1.3.181)" => Ok(5050),
        "Erlang (Erlang 26.0.2)" => Ok(5051),
        "TypeScript 5.1 (Deno 1.35.1)" => Ok(5052),
        "C++ 17 (gcc 12.2)" => Ok(5053),
        "Rust (rustc 1.70.0)" => Ok(5054),
        "Python (CPython 3.11.4)" => Ok(5055),
        "Scala (Dotty 3.3.0)" => Ok(5056),
        "Koka (koka 2.4.0)" => Ok(5057),
        "TypeScript 5.1 (Node.js 18.16.1)" => Ok(5058),
        "OCaml (ocamlopt 5.0.0)" => Ok(5059),
        "Raku (Rakudo 2023.06)" => Ok(5060),
        "Vim (vim 9.0.0242)" => Ok(5061),
        "Emacs Lisp (Native Compile) (GNU Emacs 28.2)" => Ok(5062),
        "Python (Mambaforge / CPython 3.10.10)" => Ok(5063),
        "Clojure (clojure 1.11.1)" => Ok(5064),
        "プロデル (mono版プロデル 1.9.1182)" => Ok(5065),
        "ECLiPSe (ECLiPSe 7.1_13)" => Ok(5066),
        "Nibbles (literate form) (nibbles 1.01)" => Ok(5067),
        "Ada (GNAT 12.2)" => Ok(5068),
        "jq (jq 1.6)" => Ok(5069),
        "Cyber (Cyber v0.2-Latest)" => Ok(5070),
        "Carp (Carp 0.5.5)" => Ok(5071),
        "C++ 17 (Clang 16.0.5)" => Ok(5072),
        "C++ 20 (Clang 16.0.5)" => Ok(5073),
        "LLVM IR (Clang 16.0.5)" => Ok(5074),
        "Emacs Lisp (Byte Compile) (GNU Emacs 28.2)" => Ok(5075),
        "Factor (Factor 0.98)" => Ok(5076),
        "D (GDC 12.2)" => Ok(5077),
        "Python (PyPy 3.10-v7.3.12)" => Ok(5078),
        "Whitespace (whitespacers 1.0.0)" => Ok(5079),
        "&gt;&lt;&gt; (fishr 0.1.0)" => Ok(5080),
        "ReasonML (reason 3.9.0)" => Ok(5081),
        "Python (Cython 0.29.34)" => Ok(5082),
        "Octave (GNU Octave 8.2.0)" => Ok(5083),
        "Haxe (JVM) (Haxe 4.3.1)" => Ok(5084),
        "Elixir (Elixir 1.15.2)" => Ok(5085),
        "Mercury (Mercury 22.01.6)" => Ok(5086),
        "Seed7 (Seed7 3.2.1)" => Ok(5087),
        "Emacs Lisp (No Compile) (GNU Emacs 28.2)" => Ok(5088),
        "Unison (Unison M5b)" => Ok(5089),
        "COBOL (GnuCOBOL(Fixed) 3.1.2)" => Ok(5090),
        _ => Err(anyhow!("Unknown language name error.")),
    }
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_lang_to_id() {
        assert_eq!(5001, lang_to_id("C++ 20 (gcc 12.2)").unwrap());
        assert_eq!(5002, lang_to_id("Go (go 1.20.6)").unwrap());
        assert!(lang_to_id("Vim").is_err());
    }
}
